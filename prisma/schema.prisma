generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Course {
  id                String              @id @default(uuid())
  name              String              @unique
  slug              String              @unique @default(cuid())
  description       String?
  content           String?             @db.Text
  videoSourceUrl    String?
  thumbnailUrl      String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  publicationDate   DateTime
  published         Boolean             @default(true)
  modules           Module[]
  tags              TagOptionTagValue[]
  comments          Comment[]
  subscriptions     UserSubscriptions[]
  isSelling         Boolean             @default(false)
  delegateAuthTo    Course[]            @relation("AuthDelegation")
  authDelegatedFrom Course[]            @relation("AuthDelegation")

  @@map("courses")
}

model Module {
  id              String              @id @default(uuid())
  name            String
  slug            String              @unique @default(cuid())
  description     String?
  content         String?             @db.Text
  videoSourceUrl  String?
  thumbnailUrl    String
  course          Course[]
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  publicationDate DateTime
  published       Boolean             @default(false)
  lessons         Lesson[]
  tags            TagOptionTagValue[]
  comments        Comment[]

  @@map("modules")
}

model Lesson {
  id              String              @id @default(uuid())
  name            String
  slug            String              @unique @default(cuid())
  type            LessonType          @default(video)
  description     String?
  content         String?             @db.Text
  videoSourceUrl  String?
  thumbnailUrl    String
  modules         Module[]
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  publicationDate DateTime
  published       Boolean             @default(false)
  tags            TagOptionTagValue[]
  comments        Comment[]
  lessonProgress  LessonProgress[]
  duration        Int?

  @@map("lessons")
}

enum LessonType {
  video
  text
  courseWare
}

model TagOption {
  id                String              @id @default(uuid())
  name              String              @unique
  description       String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  TagOptionTagValue TagOptionTagValue[]

  @@map("tag_options")
}

model TagValue {
  id                String              @id @default(uuid())
  name              String              @unique
  description       String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  TagOptionTagValue TagOptionTagValue[]

  @@map("tag_values")
}

model TagOptionTagValue {
  id            String    @id @default(uuid())
  tagOptionName String
  tagValueName  String
  tagOption     TagOption @relation(fields: [tagOptionName], references: [name], onDelete: Cascade)
  tagValue      TagValue  @relation(fields: [tagValueName], references: [name], onDelete: Cascade)
  lessons       Lesson[]
  modules       Module[]
  courses       Course[]
  published     Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique(name: "tag", [tagOptionName, tagValueName])
  @@map("tag_option_tag_value")
}

model Comment {
  id           String    @id @default(uuid())
  content      String    @db.Text
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  userId       String
  lesson       Lesson?   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  course       Course?   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  module       Module?   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  lessonId     String?
  courseId     String?
  moduleId     String?
  responseToId String?
  responseTo   Comment?  @relation("CommentToComment", fields: [responseToId], references: [id], onDelete: Cascade)
  responses    Comment[] @relation("CommentToComment")
  notify       String[]
  published    Boolean   @default(true)

  @@map("comments")
}

model LessonProgress {
  id                     String    @id @default(uuid())
  lesson                 Lesson    @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  userId                 String
  lessonId               String
  progressInMilliseconds Int       @default(0)
  startedAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  finishedAt             DateTime?

  @@unique([lessonId, userId])
  @@map("lesson_progress")
}

model UserSubscriptions {
  id                     String                    @id @default(uuid())
  userId                 String
  courseId               String
  createdAt              DateTime                  @default(now())
  updatedAt              DateTime                  @updatedAt
  expiresAt              DateTime
  course                 Course                    @relation(fields: [courseId], references: [id])
  provider               SubscriptionProvidersType
  providerSubscriptionId String                    @unique

  @@unique([userId, courseId, providerSubscriptionId])
  @@map("user_subscriptions")
}

enum SubscriptionProvidersType {
  hotmart
  iugu
  manual
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Course {
  id                String              @id @default(uuid())
  oldId             String?
  name              String              @unique
  slug              String              @unique @default(cuid())
  description       String
  order             Int?
  content           String?             @db.Text
  marketingContent  String?             @db.Text
  videoSourceUrl    String?
  marketingVideoUrl String?
  thumbnailUrl      String              @default("d9fd2efe-ee41-45d6-25a5-4ec50aad7000")
  publicationDate   DateTime
  isPublished       Boolean             @default(false)
  isSelling         Boolean             @default(false)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  comments          Comment[]
  subscriptions     UserSubscriptions[]
  delegateAuthTo    Course[]            @relation("AuthDelegation")
  authDelegatedFrom Course[]            @relation("AuthDelegation")
  modules           ModuleToCourse[]

  @@map("courses")
}

model Module {
  id                   String           @id @default(uuid())
  oldId                String?
  name                 String
  slug                 String           @unique @default(cuid())
  description          String
  content              String?          @db.Text
  marketingContent     String?          @db.Text
  videoSourceUrl       String?
  marketingVideoUrl    String?
  thumbnailUrl         String           @default("d9fd2efe-ee41-45d6-25a5-4ec50aad7000")
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  lessons              LessonToModule[]
  isLessonsOrderRandom Boolean          @default(false)
  comments             Comment[]
  courses              ModuleToCourse[]

  @@map("modules")
}

model ModuleToCourse {
  id              String   @id @default(uuid())
  module          Module   @relation(fields: [moduleSlug], references: [slug], onUpdate: Cascade, onDelete: Cascade)
  moduleSlug      String
  course          Course   @relation(fields: [courseSlug], references: [slug], onUpdate: Cascade, onDelete: Cascade)
  courseSlug      String
  order           Int
  isPublished     Boolean  @default(false)
  publicationDate DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique(name: "moduleToCourse", [moduleSlug, courseSlug])
  @@map("module_to_course")
}

model Lesson {
  id                String              @id @default(uuid())
  oldId             String?
  name              String
  slug              String              @unique @default(cuid())
  type              LessonType          @default(video)
  description       String
  content           String?             @db.Text
  marketingContent  String?             @db.Text
  videoSourceUrl    String?
  marketingVideoUrl String?
  thumbnailUrl      String              @default("d9fd2efe-ee41-45d6-25a5-4ec50aad7000")
  modules           LessonToModule[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  tags              TagOptionTagValue[]
  comments          Comment[]
  completedBy       CompletedLessons[]
  duration          Int?
  FavoritedBy       FavoritedLessons[]
  SavedBy           SavedLessons[]

  @@map("lessons")
}

enum LessonType {
  video
  text
  courseWare
}

model LessonToModule {
  id              String   @id @default(uuid())
  lesson          Lesson   @relation(fields: [lessonSlug], references: [slug], onUpdate: Cascade, onDelete: Cascade)
  lessonSlug      String
  module          Module   @relation(fields: [moduleSlug], references: [slug], onUpdate: Cascade, onDelete: Cascade)
  moduleSlug      String
  order           Int
  isPublished     Boolean  @default(false)
  publicationDate DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique(name: "lessonToModule", [lessonSlug, moduleSlug])
  @@map("lesson_to_module")
}

model TagOption {
  id                String              @id @default(uuid())
  name              String              @unique
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  TagOptionTagValue TagOptionTagValue[]

  @@map("tag_options")
}

model TagValue {
  id                String              @id @default(uuid())
  name              String              @unique
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  TagOptionTagValue TagOptionTagValue[]

  @@map("tag_values")
}

model TagOptionTagValue {
  id            String    @id @default(uuid())
  tagOptionName String
  tagValueName  String
  tagOption     TagOption @relation(fields: [tagOptionName], references: [name], onDelete: Cascade, onUpdate: Cascade)
  tagValue      TagValue  @relation(fields: [tagValueName], references: [name], onDelete: Cascade, onUpdate: Cascade)
  lessons       Lesson[]
  published     Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique(name: "tag", [tagOptionName, tagValueName])
  @@map("tag_option_tag_value")
}

model Comment {
  id              String    @id @default(uuid())
  content         String    @db.Text
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  userId          String
  authorFirstName String
  authorLastName  String
  lesson          Lesson?   @relation(fields: [lessonSlug], references: [slug], onDelete: Cascade, onUpdate: Cascade)
  course          Course?   @relation(fields: [courseSlug], references: [slug], onDelete: Cascade, onUpdate: Cascade)
  module          Module?   @relation(fields: [moduleSlug], references: [slug], onDelete: Cascade, onUpdate: Cascade)
  lessonSlug      String?
  courseSlug      String?
  moduleSlug      String?
  responseToId    String?
  responseTo      Comment?  @relation("CommentToComment", fields: [responseToId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  responses       Comment[] @relation("CommentToComment")
  published       Boolean   @default(true)

  @@map("comments")
}

model CompletedLessons {
  id          String   @id @default(uuid())
  userId      String
  lesson      Lesson   @relation(fields: [lessonSlug], references: [slug], onDelete: Cascade, onUpdate: Cascade)
  lessonSlug  String
  isCompleted Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([lessonSlug, userId])
  @@map("lesson_progress")
}

model FavoritedLessons {
  id          String   @id @default(uuid())
  userId      String
  lesson      Lesson   @relation(fields: [lessonSlug], references: [slug], onDelete: Cascade, onUpdate: Cascade)
  lessonSlug  String
  isFavorited Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, lessonSlug])
  @@map("favorited_lessons")
}

model SavedLessons {
  id         String   @id @default(uuid())
  userId     String
  lesson     Lesson   @relation(fields: [lessonSlug], references: [slug], onDelete: Cascade, onUpdate: Cascade)
  lessonSlug String
  isSaved    Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([userId, lessonSlug])
  @@map("saved_lessons")
}

model UserSubscriptions {
  id                         String                   @id @default(uuid())
  userId                     String
  courseSlug                 String
  createdAt                  DateTime                 @default(now())
  updatedAt                  DateTime                 @updatedAt
  expiresAt                  DateTime
  course                     Course                   @relation(fields: [courseSlug], references: [slug], onDelete: Cascade, onUpdate: Cascade)
  provider                   SubscriptionProviderType
  providerSubscriptionId     String                   @unique
  providerSubscriptionStatus String?

  @@unique([userId, courseSlug, providerSubscriptionId])
  @@map("user_subscriptions")
}

enum SubscriptionProviderType {
  hotmart
  iugu
  manual
}
